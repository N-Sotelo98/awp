{"version":3,"sources":["serviceWorker.js","joke.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Joke","props","heroes","onLine","localStorage","getItem","this","setState","JSON","parse","fetch","res","json","data","results","stringify","setItem","length","Fragment","map","heroe","id","name","description","src","thumbnail","path","Component","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iKAYMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,uCCpClDC,E,YApCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDT,MAAQ,CACTU,OAAQ,IAHG,E,iFApBE,IAAD,OACXnB,UAAUoB,SAC4B,OAAnCC,aAAaC,QAAQ,UACrBC,KAAKC,SAAS,CAAEL,OAAQ,MAExBR,QAAQC,IAAIS,aAAaC,QAAQ,WACjCC,KAAKC,SAAS,CAAEL,OAAQM,KAAKC,MAAML,aAAaC,QAAQ,eAIhEK,MAAM,kJACDxB,MAAK,SAAAyB,GACF,OAAOA,EAAIC,UACZ1B,MAAK,SAAAyB,GACJ,EAAKJ,SAAS,CAAEL,OAAQS,EAAIE,KAAKC,UACjCpB,QAAQC,IAAIa,KAAKO,UAAU,EAAKvB,MAAMU,SACtCE,aAAaY,QAAQ,SAAUR,KAAKO,UAAU,EAAKvB,MAAMU,gB,8CAYjE,OACI,6BACI,6CACA,uDAAgC,8BAAOI,KAAKd,MAAMU,OAAOe,QACxDX,KAAKd,MAAMU,OACR,kBAAC,IAAMgB,SAAP,KACKZ,KAAKd,MAAMU,OAAOiB,KAAI,SAACC,GACpB,OACI,6BACI,mCAASA,EAAMC,IACf,uCAAaD,EAAME,MACnB,4CACA,2BAAIF,EAAMG,aACV,yBAAKC,IAAKJ,EAAMK,UAAUC,KAAO,8BAM7C,kBAAC,IAAMR,SAAP,KACI,qD,GAjDTS,aCInBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SFe1C,SAAkBjD,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiD,IAAIC,GAAwBzD,OAAOC,SAASyD,MACpDC,SAAW3D,OAAOC,SAAS0D,OAIvC,OAGF3D,OAAO4D,iBAAiB,QAAQ,WAC9B,IAAMvD,EAAK,UAAMoD,GAAN,sBAEP3D,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,GACHK,MAAK,SAAAmD,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C3D,UAAUC,cAAc2D,MAAMzD,MAAK,SAAAC,GACjCA,EAAayD,aAAa1D,MAAK,WAC7BV,OAAOC,SAASoE,eAKpBjE,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAmD,CAAwBjE,EAAOC,GAI/BC,UAAUC,cAAc2D,MAAMzD,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OEtC/BE,I","file":"static/js/main.6421a84d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\n\nclass Joke extends Component {\n    componentDidMount() {\n        if (!navigator.onLine) {\n            if (localStorage.getItem('heroes') === null)\n                this.setState({ heroes: [] })\n            else {\n                console.log(localStorage.getItem('heroes'))\n                this.setState({ heroes: JSON.parse(localStorage.getItem('heroes')) });\n            }\n        }\n\n        fetch(\"https://gateway.marvel.com:443/v1/public/characters?ts=marvelapi&hash=985b84f5b7374243977307c3726b8e88&apikey=72648eeba99211e404e226773f072ecc\")\n            .then(res => {\n                return res.json();\n            }).then(res => {\n                this.setState({ heroes: res.data.results });\n                console.log(JSON.stringify(this.state.heroes))\n                localStorage.setItem('heroes', JSON.stringify(this.state.heroes));\n            });\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            heroes: [],\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Ejecricio PWA</h1>\n                <h3>Numero de superheroes :</h3><span>{this.state.heroes.length}</span>\n                {this.state.heroes ? (\n                    <React.Fragment>\n                        {this.state.heroes.map((heroe) => {\n                            return (\n                                <div>\n                                    <h4>id: {heroe.id}</h4>\n                                    <h4>Nombre: {heroe.name}</h4>\n                                    <h4>Description:</h4>\n                                    <p>{heroe.description}</p>\n                                    <img src={heroe.thumbnail.path + \"/portrait_xlarge.jpg\"} />\n                                </div>\n                            )\n                        })}\n                    </React.Fragment>\n                ) : (\n                        <React.Fragment>\n                            <h1>No hay ni mierd</h1>\n                        </React.Fragment>\n                    )}\n            </div>\n        );\n    }\n}\n\nexport default Joke;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport Joke from './joke'\n\nReactDOM.render(<Joke/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}